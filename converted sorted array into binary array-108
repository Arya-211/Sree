public class Main {
    // Definition for a binary tree node.
    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode() {}
        TreeNode(int val) { this.val = val; }
        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }

    public static class Solution {
        public TreeNode sortedArrayToBST(int[] nums) {
            return helper(nums, 0, nums.length - 1);
        }

        private TreeNode helper(int[] nums, int left, int right) {
            if (left > right) {
                return null; // base case
            }
            
            int mid = left + (right - left) / 2; // avoid overflow
            TreeNode node = new TreeNode(nums[mid]);
            node.left = helper(nums, left, mid - 1);
            node.right = helper(nums, mid + 1, right);
            return node; 
        }
    }

    public static void main(String[] args) {
        // Example sorted array
        int[] nums = {-10, -3, 0, 5, 9};

        // Convert the sorted array to a binary search tree
        Solution solution = new Solution();
        TreeNode bstRoot = solution.sortedArrayToBST(nums);

        // Print the BST including null values
        printTree(bstRoot);
    }

    // Helper method to print the tree including null values
    public static void printTree(TreeNode node) {
        if (node == null) {
            System.out.print("null ");
            return;
        }
        System.out.print(node.val + " ");
        printTree(node.left);
        printTree(node.right);
    }
}
